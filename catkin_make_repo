#!/bin/bash -e
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
ROS_VERSION=$(source $DIR/get_latest_ros_version.sh)
source /opt/ros/$ROS_VERSION/setup.sh

export PATH=/usr/texbin/:/usr/lib/ccache:/usr/local/bin/:/usr/local/opt/ccache/libexec/:$PATH

RUN_TESTS=$1
PACKAGES=${*:2}

MAKE_ARGS="-j5 VERBOSE=1"

mkdir -p $WORKSPACE/devel/include

echo Checking whether we should run the tests...
if $RUN_TESTS; then
  echo "Will first build $PACKAGES and then run tests."
else
  echo "Will only build $PACKAGES and skip tests."
fi

if $MERGE_DEVEL; then
  catkin config --merge-devel # Necessary for catkin_tools >= 0.4.
fi

catkin build -w $WORKSPACE --verbose --no-status $PACKAGES --make-args $MAKE_ARGS --cmake-args -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-DALWAYS_ASSERT -DCMAKE_C_FLAGS=-DALWAYS_ASSERT
ret_code=$?
if [ $ret_code != 0 ]; then
  exit $ret_code
fi

if $RUN_TESTS; then
  echo "*** sourcing the devel space"
  source $WORKSPACE/devel/setup.bash
  # Clear out results from the requested packages.
  TEST_RESULTS_FOLDER=$WORKSPACE/build/test_results
  rm -rf $TEST_RESULTS_FOLDER
  mkdir $TEST_RESULTS_FOLDER

  for PACKAGE in $PACKAGES
  do
    echo "*** $PACKAGE -- Attempting to run unit tests."
    
    set +e
    # catch the output of catkin make and redirect stderr to stdout (2>&1)
    OUTPUT=$(cd $WORKSPACE/build/$PACKAGE && make tests $MAKE_ARGS && make run_tests -j1 VERBOSE=1|tee >(cat - >&2))
    ret_code=$?
    set -e

    # Try to figure out if things failed because there are no unit tests
    # for this package. Search for the error message Make puts out:
    if ! echo $OUTPUT | grep -s "No rule to make target"; then
        # There were tests
        # Echo the output for parsing by Jenkins. Placing this line
        # inside the if statement supresses output if there were
        # no tests
        echo "$OUTPUT"
        if [ $ret_code != 0 ]; then
            echo "*** $PACKAGE -- Unit tests failed"
            exit $ret_code
        else
            echo "*** $PACKAGE -- Unit tests succeeded"
            echo "*** $PACKAGE -- Copy unit test results to common folder."
            cp -r $WORKSPACE/build/$PACKAGE/test_results/$PACKAGE $TEST_RESULTS_FOLDER/ || true
        fi
    else
        echo "*** $PACKAGE -- No unit tests found"
    fi
  done

  # Clear / Create a directory in the workspace where we can store the test results.
  TEST_RESULTS_DEST=$WORKSPACE/test_results/
  rm -rf $TEST_RESULTS_DEST
  mkdir -p $TEST_RESULTS_DEST

  # Copy all test results from the currently build packages to the workspace folder.
  echo "Copying test results from $TEST_RESULTS_FOLDER/$package to $TEST_RESULTS_DEST..."
  cp -vr $TEST_RESULTS_FOLDER/* $TEST_RESULTS_DEST/ || true
fi

exit 0
