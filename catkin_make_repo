#!/bin/bash -e
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CI_MODULES=$DIR/modules

# "Setup common functions and definitions and source current ROS"
source $CI_MODULES/common_definitions.sh

export PATH=/usr/texbin/:/usr/lib/ccache:/usr/local/bin/:/usr/local/opt/ccache/libexec/:$PATH

RUN_TESTS=$1
NUM_PARALLEL_TEST_JOBS=$2
PACKAGES=${*:3}

if [[ "$OSTYPE" == "linux-gnu" ]]; then
  MAKE_ARGS="-j$((`nproc`+1)) VERBOSE=1"
elif [[ "$OSTYPE" == "darwin"* ]]; then
  MAKE_ARGS="-j$((`sysctl -n hw.ncpu`+1)) VERBOSE=1"
else
  echo "Unknown operating system."
  exit
fi

#CMake variables CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY and CMAKE_EXPORT_NO_PACKAGE_REGISTRY prevent usage of the user package registry. No build should rely on it!
CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-DALWAYS_ASSERT -DCMAKE_C_FLAGS=-DALWAYS_ASSERT -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON -DCMAKE_EXPORT_NO_PACKAGE_REGISTRY=ON"

#For those workers with CMAKE older than 3.1: purge the registry before every build. See also a few lines above.
#TODO (after removing trusty slaves) : remove this hack
rm -rf ~/.cmake/packages

if [ -e ~/local.catkin_make_repo.settings.sh ]; then
  echo "Reading settings from local.catkin_make_repo.settings.sh:" 
  cat ~/local.catkin_make_repo.settings.sh
  source ~/local.catkin_make_repo.settings.sh
fi

if [ -n "$TERM" ] ; then
  export TERM=xterm
fi

mkdir -p $WORKSPACE/devel/include

echo Checking whether we should run the tests...
if $RUN_TESTS; then
  echo "Will first build $PACKAGES and then run tests."
else
  echo "Will only build $PACKAGES and skip tests."
fi

if $MERGE_DEVEL; then
  catkin config --merge-devel # Necessary for catkin_tools >= 0.4.
fi

echo "*** building packages"
catkin build -w $WORKSPACE --verbose --no-status $CATKIN_ARGS $PACKAGES --make-args $MAKE_ARGS --cmake-args $CMAKE_ARGS
ret_code=$?
if [ $ret_code != 0 ]; then
  exit $ret_code
fi

if $RUN_TESTS; then
  echo "*** sourcing the devel space"
  source $WORKSPACE/devel/setup.bash
  # Clear out results from the requested packages.
  TEST_RESULTS_FOLDER=$WORKSPACE/build/test_results
  rm -rf $TEST_RESULTS_FOLDER
  mkdir $TEST_RESULTS_FOLDER

  echo "*** building tests"
  catkin build -w  $WORKSPACE --verbose --no-deps --no-status $CATKIN_ARGS $PACKAGES --make-args tests $MAKE_ARGS --cmake-args -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-DALWAYS_ASSERT -DCMAKE_C_FLAGS=-DALWAYS_ASSERT

  echo "*** running tests"
  catkin run_tests -w  $WORKSPACE --verbose --no-deps --no-status $CATKIN_ARGS $PACKAGES -j$NUM_PARALLEL_TEST_JOBS

  # Collect the results files
  for PACKAGE in $PACKAGES
  do
    PACKAGE_TEST_RESULTS_FOLDER=$WORKSPACE/build/$PACKAGE/test_results/$PACKAGE
    if [ -d $PACKAGE_TEST_RESULTS_FOLDER ] ; then
        echo "*** $PACKAGE -- Copy unit test results to common folder."
        cp -r $PACKAGE_TEST_RESULTS_FOLDER $TEST_RESULTS_FOLDER/ || true
    else
        echo "*** $PACKAGE -- No unit tests found!" >&2
    fi
  done

  # Clear / Create a directory in the workspace where we can store the test results.
  TEST_RESULTS_DEST=$WORKSPACE/test_results/
  rm -rf $TEST_RESULTS_DEST
  mkdir -p $TEST_RESULTS_DEST

  # Copy all test results from the currently build packages to the workspace folder.
  echo "Copying test results from $TEST_RESULTS_FOLDER/$package to $TEST_RESULTS_DEST..."
  cp -vr $TEST_RESULTS_FOLDER/* $TEST_RESULTS_DEST/ || true
fi

exit 0
